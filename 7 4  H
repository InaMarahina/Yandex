"""H. Разрезание графа
Тренировки по алгоритмам 7.0 от Яндекса — Занятие 4 (Ссылочные типы данных, двусвязные списки, B-деревья)
https://contest.yandex.ru/contest/74968/problems/H/
Ограничение времени	1 секунда
Ограничение памяти	256 Мб
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Дан неориентированный граф. Над ним в заданном порядке производят операции следующих двух типов:

cut — разрезать граф, то есть удалить из него ребро;
ask — проверить, лежат ли две вершины графа в одной компоненте связности.
Известно, что после выполнения всех операций типа cut рёбер в графе не осталось. Найдите результат выполнения каждой из операций типа ask.

Формат вывода
Для каждой операции ask во входном файле выведите на отдельной строке слово ”YES”, если две указанные вершины лежат в одной компоненте связности, и ”NO” в противном случае. Порядок ответов должен соответствовать порядку операций ask во входном файле.
"""
import sys


def main():
    # Чтение всех входных данных сразу для ускорения обработки
    input = sys.stdin.read().split()
    ptr = 0  # Указатель на текущую позицию в входных данных
    
    n = int(input[ptr])  # Количество элементов
    ptr += 1
    nn = int(input[ptr])  # Дополнительный параметр (не используется)
    ptr += 1
    m = int(input[ptr])  # Количество операций
    ptr += 1
    col = 0  # Неиспользуемая переменная (можно удалить)

    dictsel = {}  # Словарь для хранения множеств связанных элементов
    arrays = [0] * (n + 1)  # Массив для хранения родительских элементов (аналог DSU)
    
    answ = []  # Список для хранения ответов на запросы

    # Обработка операций в обратном порядке (от последней к первой)
    for i in range(m, 0, -1):
        # Вычисление указателя на текущую операцию во входных данных
        ptr = (i - 1)*3 + (nn + 1) * 2 + 1
        
        zp = input[ptr]  # Тип операции ('ask' или 'cut')
        ptr += 1
        el = int(input[ptr])  # Первый элемент операции
        ptr += 1
        el2 = int(input[ptr])  # Второй элемент операции
        ptr += 1

        # Обработка запроса (ask)
        if zp == 'ask':
            # Проверка, соединены ли элементы:
            # 1. Оба элемента в одном множестве
            # 2. Оба элемента не в множествах (считаются разными)
            # 3. Элементы одинаковые (автоматически соединены)
            if not (arrays[el] == 0 or arrays[el2] == 0 or arrays[el] != arrays[el2]) or el == el2:
                answ.append('YES')
            else:
                answ.append('NO')
        
        # Обработка операции удаления связи (cut)
        elif zp == 'cut' and (el != el2 and (arrays[el] == 0 or arrays[el2] == 0 or arrays[el] != arrays[el2])):
            # Случай 1: Оба элемента не принадлежат никакому множеству
            if arrays[el] == 0 and arrays[el2] == 0:
                arrays[el] = el  # Создаем новое множество
                arrays[el2] = el  # Присоединяем el2
                dictsel[el] = {el, el2}  # Сохраняем множество
            
            # Случай 2: el не в множестве, el2 - корень своего множества
            elif arrays[el] == 0 and arrays[el2] == el2:
                arrays[el] = el2  # Присоединяем el к множеству el2
                dictsel[el2].add(el)  # Добавляем el в множество
            
            # Случай 3: el2 не в множестве, el - корень своего множества
            elif arrays[el2] == 0 and arrays[el] == el:
                arrays[el2] = el  # Присоединяем el2 к множеству el
                dictsel[el].add(el2)  # Добавляем el2 в множество
            
            # Случай 4: el не в множестве, el2 уже в каком-то множестве
            elif arrays[el] == 0:
                arrays[el] = arrays[el2]  # Присоединяем el к множеству el2
                dictsel[arrays[el2]].add(el)  # Добавляем el в множество
            
            # Случай 5: el2 не в множестве, el уже в каком-то множестве
            elif arrays[el2] == 0:
                arrays[el2] = arrays[el]  # Присоединяем el2 к множеству el
                dictsel[arrays[el]].add(el2)  # Добавляем el2 в множество
            
            # Случай 6: el2 в чужом множестве, el - корень своего множества
            elif arrays[el2] != el2 and arrays[el] == el:
                # Объединение по размеру (меньшее к большему)
                if len(dictsel[el]) >= len(dictsel[arrays[el2]]):
                    dictsel[el].update(dictsel[arrays[arrays[el2]]])  # Объединяем множества
                    for elem in dictsel[arrays[arrays[el2]]]:
                        arrays[elem] = el  # Обновляем родителя для элементов
                    arrays[arrays[el2]] = el  # Обновляем родителя для корня
                else:
                    dictsel[arrays[arrays[el2]]].update(dictsel[arrays[el]])
                    for elem in dictsel[arrays[el]]:
                        arrays[elem] = arrays[el2]
                    arrays[el] = arrays[el2]
            
            # Случай 7: el в чужом множестве, el2 - корень своего множества
            elif arrays[el] != el and arrays[el2] == el2:
                # Аналогично случаю 6
                if len(dictsel[el2]) >= len(dictsel[arrays[el]]):
                    dictsel[el2].update(dictsel[arrays[arrays[el]]])
                    for elem in dictsel[arrays[arrays[el]]]:
                        arrays[elem] = el2
                    arrays[arrays[el]] = el2
                else:
                    dictsel[arrays[arrays[el]]].update(dictsel[arrays[el2]])
                    for elem in dictsel[arrays[el2]]:
                        arrays[elem] = arrays[el]
                    arrays[arrays[el2]] = arrays[el]
            
            # Случай 8: Оба элемента - корни своих множеств
            elif arrays[el] == el and arrays[el2] == el2:
                # Объединение по размеру
                if len(dictsel[el2]) >= len(dictsel[el]):
                    dictsel[el2].update(dictsel[el])
                    for elem in dictsel[arrays[el]]:
                        arrays[elem] = el2
                    arrays[el] = el2
                else:
                    dictsel[el].update(dictsel[el2])
                    for elem in dictsel[arrays[el2]]:
                        arrays[elem] = el
                    arrays[el2] = el
            
            # Случай 9: Оба элемента в разных множествах (не корни)
            elif arrays[el2] != el2 and arrays[el] != el:
                # Объединение по размеру
                if len(dictsel[arrays[el]]) >= len(dictsel[arrays[el2]]):
                    dictsel[arrays[el]].update(dictsel[arrays[arrays[el2]]])
                    for elem in dictsel[arrays[arrays[el2]]]:
                        arrays[elem] = arrays[el]
                    arrays[arrays[el2]] = arrays[el]
                else:
                    dictsel[arrays[el2]].update(dictsel[arrays[el]])
                    for elem in dictsel[arrays[arrays[el]]]:
                        arrays[elem] = arrays[el2]
                        dictsel[arrays[arrays[el2]]].add(elem)
                    arrays[arrays[el]] = arrays[el2]

    # Вывод ответов в обратном порядке (так как обрабатывали операции с конца)
    sys.stdout.write('\n'.join(answ[::-1]))


if __name__ == '__main__':
    main()
