"""
D. Переключение между окнами
Тренировки по алгоритмам 7.0 от Яндекса — Занятие 4 (Ссылочные типы данных, двусвязные списки, B-деревья)
https://contest.yandex.ru/contest/74968/problems/D/

Ограничение времени	1 секунда
Ограничение памяти	256 Мб
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Когда пользователь работает в операционной системе Windows, у него часто запущено несколько приложений. Каждое из приложений работает в отдельном окне. Для переключения между окнами используется комбинация клавиш ”Alt+Tab”. Эта комбинация делает активным окно, в котором пользователь работал перед тем, как перейти в текущее активное окно.

Чтобы переключиться в другое окно, можно нажать клавишу ”Alt” и затем, не отпуская её, несколько раз нажать клавишу ”Tab”. Чтобы понять, какое окно станет активным после этого, воспользуемся следующей моделью. Пусть запущено 
n
n приложений. Приложения в операционной системе организованы в виде списка и упорядочены по убыванию времени последней активности. То есть приложение, окно которого является активным в настоящий момент — первое в списке, приложение, окно которого было активно перед этим — второе, и т. д.

Если нажать клавишу ”Alt” и затем, не отпуская её, нажать клавишу ”Tab” 
k
k раз, то активным станет окно приложения, которое находится на 
(
k
%
n
)
+
1
(k%n)+1-м месте в списке. Здесь 
a
%
b
a%b означает остаток от деления 
a
a на 
b
b. Иными словами, операционная система рассматривает список как циклический, переходя после последнего элемента списка к первому.

При запуске нового приложения оно добавляется в начало списка.

Задана последовательность действий пользователя, где каждое действие — либо запуск приложения, либо переключение между окнами. Выведите список имён приложений в том порядке, в котором с ними работал пользователь.

Формат ввода
В первой строке вводится целое число 
n
n — количество действий пользователя (
1
≤
n
≤
1000
1≤n≤1000). Следующие 
n
n строк содержат описание действий пользователя.

Запуск приложения описывается строкой ”Run <имя приложения>”. Здесь ”<имя приложения>” — строка из не более чем 100 латинских букв, цифр и пробелов. Она отделена от слова ”Run” ровно одним пробелом. Все имена приложений различны. Большие и маленькие буквы считаются различными.

Переключение между приложениями описывается строкой ”Alt+Tab+...+Tab”, здесь подстрока ”+Tab” повторена в точности столько раз, сколько раз пользователь нажал клавишу ”Tab”, не отпуская клавишу ”Alt”. Это количество не превышает 100.

Первая команда во входных данных — всегда команда ”Run”.

Формат вывода
Выведите 
n
n строк — последовательность имён приложений, с которыми работал пользователь в порядке, в котором их окна становились активными.
"""

python
import sys

def main():
    # Инициализация структур данных:
    # stack - массив для хранения элементов (команд)
    # nextstack - массив индексов следующих элементов (для реализации связанного списка)
    # n - количество команд, которые нужно обработать
    # colel - текущее количество элементов в стеке
    # head - индекс текущего активного элемента
    stack = []
    nextstack = []
    n = int(input())
    colel = 0
    head = 0
    
    for i in range(n):
        comand = input().split()
        
        # Команда "Run" - выполнение и запоминание команды
        if comand[0] == 'Run':
            # Сохраняем команду (объединяем все части после "Run")
            cmd = ' '.join(comand[1:])
            stack.append(cmd)

            # Обновляем указатели в связанном списке
            if colel > 0:
                nextstack.append(head)  # Новый элемент указывает на предыдущий head
            else:
                nextstack.append(None)  # Первый элемент не имеет следующего
            
            head = colel  # Новый элемент становится head
            colel += 1    # Увеличиваем счетчик элементов
            
            print(cmd)    # Выводим выполненную команду
            
            # Отладочный вывод (можно раскомментировать для проверки)
            # print(stack)
            # print(nextstack)
            # print(head)

        # Команда "Alt+Tab" (может быть с разным количеством "+")
        else:
            if colel > 1:  # Если в стеке больше одного элемента
                # Разбираем команду на количество нажатий Tab
                tabs = comand[0].split('+')
                coltab = len(tabs) - 1  # Количество нажатий (по количеству "+")
                
                # Вычисляем эффективное количество нажатий (по модулю colel)
                coltab = coltab % colel
                
                # Находим элемент, который нужно активировать
                nextzn = head  # Начинаем с текущего head
                prev = None    # Переменная для хранения предыдущего элемента
                
                # Проходим по цепочке coltab раз
                for i in range(coltab):
                    prev = nextzn
                    nextzn = nextstack[nextzn]  # Переходим к следующему элементу
                
                if prev is not None:
                    # Выводим команду и обновляем указатели
                    print(stack[nextzn])
                    nextstack[prev] = nextstack[nextzn]  # Исключаем элемент из середины
                    nextstack[nextzn] = head             # Переносим его в начало
                    head = nextzn                        # Обновляем head
                else:
                    # Если не было переключений (coltab = 0)
                    print(stack[nextzn])

            else:  # Если в стеке только один элемент
                print(stack[0])


if __name__ == '__main__':
    main()

