E. Слабое звено
Тренировки по алгоритмам 7.0 от Яндекса — Занятие 4 (Ссылочные типы данных, двусвязные списки, B-деревья)
https://contest.yandex.ru/contest/27393/problems/G/
Ограничение времени	2 секунды
Ограничение памяти	512 Мб
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
В Берляндии по воскресеньям проходит известное шоу — игра «Слабое звено».

В игре принимают участие 
n игроков, которые выстраиваются в круг. Каждому игроку сопоставлен рейтинг — некоторое целое число 
ai.

Игра проходит в несколько раундов, каждый из которых выглядит следующим образом:

В очередном раунде принимают участие все ещё не выбывшие игроки.
Все игроки, которые по рейтингу строго слабее обоих своих соседей по кругу, объявляются слабым звеном и выбывают из игры.
Все оставшиеся участники сдвигаются чуть плотнее, чтобы снова образовывать круг.
Игра заканчивается, если после очередного раунда осталось ровно два человека или если после очередного раунда не выбыл ни один человек.
Иначе начинается новый раунд.
Можно показать, что если до очередного раунда в игре оставалось хотя бы три участника, то после одного раунда гарантированно останется не менее двух участников.

Вам нужно выяснить для каждого участника, останется ли он до конца, или номер раунда, в котором он покинет игру.

Раунды нумеруются последовательными целыми числами, начиная с  1

import sys

def main():
    """
    Основная функция обработки данных.
    Алгоритм определяет раунды удаления элементов из кольцевого списка,
    где элемент удаляется, если он меньше обоих соседей.
    """
    # Чтение входных данных
    input = sys.stdin.read().split()
    ptr = 0
    n = int(input[ptr])  # Количество элементов
    ptr += 1
    
    # Обработка частного случая
    if n == 2:
        print('0 0')
        return
    
    stack = list(map(int, input[ptr:ptr+n]))  # Исходный массив значений
    nextstack = [0]*n  # Массив указателей на следующий элемент
    prevstack = [0]*n  # Массив указателей на предыдущий элемент
    res = ['0']*n      # Массив результатов (раунды удаления)
    delarray = []      # Массив элементов для удаления в текущем раунде
    
    # Инициализация связей между элементами (кольцевой список)
    nextstack[0] = 1
    nextstack[n-1] = 0
    prevstack[0] = n - 1
    prevstack[n-1] = n - 2
    
    # Проверка крайних элементов для первого раунда
    if stack[0] < stack[n-1] and stack[0] < stack[1]:
        delarray.append(0)
        res[0] = '1'
    
    if stack[0] > stack[n-1] and stack[n-1] < stack[n-2]:
        delarray.append(n-1)
        res[n-1] = '1'
    
    # Инициализация связей для средних элементов и проверка условий удаления
    for i in range(1, n-1):
        nextstack[i] = i + 1
        prevstack[i] = i - 1
        if stack[i] < stack[i-1] and stack[i] < stack[i+1]:
            delarray.append(i)
            res[i] = '1'
    
    ost_col = n - len(delarray)  # Количество оставшихся элементов
    
    # Основной цикл обработки раундов
    raund = 1
    while len(delarray) > 0 and ost_col > 2:
        raund += 1
        temparray = []  # Массив для элементов следующего раунда
        
        # Обработка последовательных удаляемых элементов
        i = 0
        while i < len(delarray):
            # Поиск последовательных удаляемых элементов
            j = 1
            while i + j < len(delarray) and delarray[i] + j == delarray[i + j]:
                j += 1
            j -= 1
            
            # Определение соседей удаляемого блока
            left = prevstack[delarray[i]]
            right = nextstack[delarray[i+j]]
            
            # Обновление связей
            nextstack[left] = right
            prevstack[right] = left
            
            # Проверка новых соседей на условия удаления
            if stack[left] > stack[right] and stack[right] < stack[nextstack[right]]:
                temparray.append(right)
                res[right] = str(raund)
            elif stack[left] < stack[right] and stack[left] < stack[prevstack[left]]:
                temparray.append(left)
                res[left] = str(raund)
            
            i += 1 + j  # Переход к следующему блоку
        
        delarray = temparray.copy()
        ost_col -= len(temparray)
    
    # Вывод результата
    sys.stdout.write(' '.join(res) + '\n')

if __name__ == '__main__':
    main()
